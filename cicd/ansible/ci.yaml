- name: Continuous Integration
  hosts: localhost
  connection: local

  tasks:
    - name: Update apt cache and install dependencies (Debian/Ubuntu)
      apt:
        update_cache: yes
        name:
          - python3-pip
        state: present
      become: yes

    - set_fact:
        git_username: "{{ lookup('env', 'git_username') }}"
        git_password: "{{ lookup('env', 'git_password') }}"
        subscription_id: "{{ lookup('env', 'subscription_id') }}"
        service_principal_id: "{{ lookup('env', 'service_principal_id') }}"
        service_principal_secret: "{{ lookup('env', 'service_principal_secret') }}"
        acr_registry_url: "{{ lookup('env', 'acr_registry_url') }}"
        acr_username: "{{ lookup('env', 'acr_username') }}"
        tenant_id: "{{ lookup('env', 'tenant_id') }}"
        service_name: "{{ lookup('env', 'service_name') }}"
        source_dir: "{{ lookup('env', 'source_dir') }}"

    - name: Login to Azure using Service Principal
      command: >
        az login
        --service-principal
        --username '{{ service_principal_id }}'
        --password '{{ service_principal_secret }}'
        --tenant '{{ tenant_id }}'

    - name: Set subscription to current directory
      command: az account set --subscription {{ subscription_id }}

    - name: Login to ACR registry
      shell: echo "{{ service_principal_secret }}" | docker login wellfeddev.azurecr.io --username "{{ service_principal_id }}" --password-stdin

    - name: Install npm dependencies
      command: npm install
      args:
        chdir: "{{ source_dir }}"

    - name: Read package.json
      set_fact:
        package_json: "{{ lookup('file', source_dir + '/package.json') | from_json }}"

    - name: Extract version from package.json
      set_fact:
        version: "{{ package_json.version }}"
        imagelabel: "{{ package_json.version }}"

    - name: Debug version and imagelabel
      debug:
        msg: "version: {{ version }}, imagelabel: {{ imagelabel }}"

    - name: Build docker image
      command: docker build -t {{ service_name }} .
      args:
        chdir: "{{ source_dir }}"
      register: docker_build_result
      failed_when: docker_build_result.rc != 0

    - name: Debug Docker build result
      debug:
        msg: "{{ docker_build_result.stdout_lines }}"

    - name: Tag docker image
      command: docker tag {{ service_name }} wellfeddev.azurecr.io/{{ service_name }}:{{ imagelabel }}
      register: tag_result

    - name: Debug tag result
      debug:
        msg: "{{ tag_result }}"

    - name: Push docker image to ACR
      command: docker push wellfeddev.azurecr.io/{{ service_name }}:{{ imagelabel }}
      register: push_result

    - name: Debug push result
      debug:
        msg: "{{ push_result }}"
